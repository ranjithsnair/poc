name: Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Upload Artifacts (IaaS)
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: iaas/webapp

      - name: IIS Web App (IaaS)
        shell: pwsh
        run: |
          $applicationName = "webapp"
          $appPool = "app"
          $path = "c:\inetpub\wwwroot"
          $physicalDirectory = Join-Path -Path $path -ChildPath $applicationName
          $sourceFile = "$(New-Guid).zip"
          $sourcePath = Join-Path -Path $([System.IO.Path]::GetTempPath()) -ChildPath $sourceFile
          $sourceDirectory = Join-Path -Path $([System.IO.Path]::GetTempPath()) -ChildPath ($sourceFile -replace "-zip", "")
  
          $variableFile = "$(New-Guid)-zip"
          $variablePath = Join-Path -Path $([System.IO.Path]::GetTempPath()) -ChildPath $variableFile
          $variableDirectory = Join-Path -Path $([System.IO.Path]::GetTempPath()) -ChildPath ($variableFile -replace "-zip", "")
  
          $sourceArtifactName = "webapp"
          $variableArtifactName = "variables"
          $stopAppPool = "false"
          $startAppPool = "false"
          $force = "false"
          $clearTarget = "false"
          $fileTransform = "*.*"
  
          # Ensure IIS app pool exists or create one
          $iisAppPool = Get-IISAppPool | Where-Object { $_.Name -eq $appPool }
          if ($null -eq $iisAppPool) {
              New-WebAppPool -Name $appPool -Force
              Write-Host "Application pool $appPool created."
          }
  
          $appPoolState = Get-WebAppPoolState -Name $appPool
          if ($appPoolState.Value -eq "Started" -and $stopAppPool -eq "true") {
              Write-Host "Stopping application pool $appPool."
              Stop-WebAppPool -Name $appPool
          }
  
          # Create physical directory if it doesn't exist
          if (-not (Test-Path $physicalDirectory)) {
              New-Item -Path $physicalDirectory -ItemType Directory
              Write-Host "Physical directory $physicalDirectory created."
          }
  
          # Authorization headers for API requests
          $headers = @{
              "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              "User-Agent" = "github"
              "X-GitHub-Api-Version" = "2022-11-28"
          }
  
          # Clear target files if specified
          if ($clearTarget -eq "true") {
              Write-Host "Deleting existing files in $physicalDirectory"
              Get-ChildItem -Path $physicalDirectory -Recurse | Remove-Item -Force -Recurse
          }
  
          # Copy source files to the physical directory
          Copy-Item -Path $sourceDirectory\* -Destination $physicalDirectory -Recurse -Force
          Write-Host "Deleting $sourcePath"
          Remove-Item -Path $sourcePath -Force
  
          # Web application deployment
          $webApp = Get-WebApplication | Where-Object { $_.Name -eq $applicationName -and $_.Site -eq "Default Web Site" }
          if ($null -eq $webApp -or $force -eq "true") {
              New-WebApplication -Site "Default Web Site" -Name $applicationName -PhysicalPath $physicalDirectory -ApplicationPool $appPool -Force
              Write-Host "Web application $applicationName created."
          }
  
          if ($startAppPool -eq "true") {
              Write-Host "Starting application pool $appPool."
              Start-WebAppPool -Name $appPool
          }
  
          # Invoke command on the server
          Set-AzContext -Subscription "aa6d3153-eb68-431c-a299-4f0eea690635"
          $response = Invoke-AzVMRunCommand -ResourceGroupName "ea-sdx-uks-rg" -VMName "ea-poc" -CommandId "RunPowerShellScript" -ScriptString @ScriptBlock
          Write-Host $response
  
          if ($response.Error) {
              Write-Error $response.Error
          } else {
              Write-Host "Web application $applicationName deployed successfully."
          }
